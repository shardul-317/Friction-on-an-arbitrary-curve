import numpy as np
import matplotlib.pyplot as plt

# Parameters
g = 9.81            # gravitational acceleration (m/s^2)
mu = 0.1            # coefficient of friction
m = 1.0             # mass (kg)
x0 = 0.0            # starting x-coordinate
xf = 10.0           # final x-coordinate for simulation
dx = 0.001          # step size in x

# Define the surface as a differentiable polynomial.
# For example, let y(x) = 0.05*x^2.
def y_func(x):
    return 0.05 * x**2

def dy_dx(x):
    return 0.1 * x  # derivative of 0.05*x^2

def d2y_dx2(x):
    return 0.1      # second derivative is constant

def radius_of_curvature(x):
    # r(x) = (1 + (dy/dx)^2)^(3/2) / |d^2y/dx^2|
    fp = dy_dx(x)
    fpp = d2y_dx2(x)
    if np.abs(fpp) < 1e-6:
        return np.inf  # flat region: infinite radius
    return (1 + fp**2)**(1.5) / np.abs(fpp)

# Initial conditions
v0 = 2.0  # initial tangential velocity (m/s)
E0 = 0.5 * m * v0**2 + m * g * y_func(x0)  # total mechanical energy at x0

# Prepare arrays to store results
xs = np.arange(x0, xf, dx)
v_array = np.zeros_like(xs)
E_array = np.zeros_like(xs)
W_array = np.zeros_like(xs)  # cumulative friction work

v_array[0] = v0
E_current = E0
W_cumulative = 0.0

# Iteratively compute energy and update velocity along the surface
for i in range(1, len(xs)):
    x = xs[i-1]
    x_next = xs[i]
    
    # Compute local derivative and arc length element ds
    fp = dy_dx(x)
    ds = np.sqrt(1 + fp**2) * dx  # ds = sqrt(1+(dy/dx)^2) dx
    
    # Compute local radius of curvature
    r = radius_of_curvature(x)
    
    # Compute friction work element:
    # dW = Î¼ [ m g + m*(v^2/r)*sqrt(1+(dy/dx)^2) ] dx.
    v_local = v_array[i-1]
    if r == np.inf:
        dW = mu * m * g * dx
    else:
        dW = mu * (m * g + m * v_local**2 / r * np.sqrt(1 + fp**2)) * dx
    
    # Update cumulative work done by friction
    W_cumulative += dW
    W_array[i] = W_cumulative
    
    # Update energy: energy decreases by work done by friction
    E_current = E_current - dW
    
    # Compute potential energy at x_next
    y_next = y_func(x_next)
    PE_next = m * g * y_next
    
    # Kinetic energy is then: KE = E_current - PE_next
    KE = E_current - PE_next
    if KE < 0:
        # Object has effectively come to rest.
        v_new = 0.0
        v_array[i:] = 0.0
        E_array[i:] = E_current
        break
    else:
        v_new = np.sqrt(2 * KE / m)
    v_array[i] = v_new
    E_array[i] = E_current

# Plot the tangential velocity vs. x
plt.figure(figsize=(8,4))
plt.plot(xs, v_array, label='v(x)')
plt.xlabel('x (m)')
plt.ylabel('Tangential velocity (m/s)')
plt.title('Velocity along the Curved Surface')
plt.legend()
plt.grid(True)
plt.show()

# Plot cumulative work done by friction vs. x
plt.figure(figsize=(8,4))
plt.plot(xs, W_array, label='Cumulative Friction Work')
plt.xlabel('x (m)')
plt.ylabel('Work (J)')
plt.title('Work Done by Friction along the Surface')
plt.legend()
plt.grid(True)
plt.show()

# Plot total mechanical energy vs. x
plt.figure(figsize=(8,4))
plt.plot(xs, E_array, label='Mechanical Energy')
plt.xlabel('x (m)')
plt.ylabel('Energy (J)')
plt.title('Total Mechanical Energy vs. x (with friction)')
plt.legend()
plt.grid(True)
plt.show()
